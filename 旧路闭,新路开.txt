经过从17年到现在23年的探索,各种弯路都走了一遍后,我明白了一个事实,
从零开始构建中文汉字编程的软件工程体系,已几无可能.
事实上,要创建我们自己主导的,具有自己主权的技术体系(不管是工业还是农业或科学,不管哪一个分支),
都要走一条必经的道路,就是闭门造车,重复造轮子,
没有这一步,你根本就不知道底层的原理,或许你读过相关书籍知晓技术,但你根本没有用手脚实践过,那你就无法掌握这个主权.
这么多年的见闻告诉我,我发现不仅仅只是软件工程体系没有基础,更黑暗的事实是,
我们复制的两套工业体系(苏联工业系统,欧美昂撒的工业系统),全都没有基础,
我们只知其如何,不知其为何.
而现在我们想搞产业升级,这几年遇到重重阻难,高层也是外行领导内行,并且,屡屡失败,屡屡不见效果.
问题的根源就出在这里.
昂撒人工业革命是从他们的文化里诞生的,是从他们发现的近代数理化知识体系,和基于拉丁字母的英文英语文化里诞生而来.
我们想搞产业升级,因为只学到了点皮毛(以为只要复制其工业系统的外形就学到了精髓),完全不知其内在原理,
所以我们的产业升级屡屡失败.
就这,还幻想着在别人的产业基础上开枝散叶升级(或者说新工业革命),那不就是痴人说梦?

扯远了,回到原题.
为啥再无法从零构建起中文汉字编程的体系呢?
仅仅从表面我就发现了两点,1是崇洋媚外吃里扒外的各种编程买办歧视甚至敌视中文编程,各种嘲讽和奚落甚至扭曲的帖子文章多的是,
2是从易语言诞生以来,这种争论就从来没有停过.苍白的事实就是,我们甚至连个中文汉字编程的汇编器都造不出来,
并且,易语言从来也没有开源过,也就是说我们搞中文汉字编程连一个基本的参照样本都没有!
我直到最近才明白为啥我走这么多年弯路,在一些事情上空转,并且,我为此事也从青年熬成中年.
这不就是没有技术主权的象征吗?因为我根本就不知道内在原理啊,还被各种编程买办的帖子文章带节奏,
在一些只有外形,只在边缘徘徊的事情上耗尽了时光.

大势已去,不但再没有人力原意投入到这里面从汇编甚至机器码开始研究,并且,
西方昂撒人的软件工程体系又迎来了一个新的质变,大语言模型进行的辅助编程,
这中间,他们的发展经历了-虚拟机语言-这一繁荣昌盛的时间段(几十年的发展过程),
生态发展早已迈过万水千山,我们再也难以望其项背,即便是有人海战术也根本不可能再弯道超车了.时间窗口已过.

我为什么说虚拟机语言造成了这一降维打击呢?
大家可以翻阅软件工程近二十年的发展历史,软件和程序的生产源---编程语言和编译器点的是什么科技树.
从Java到Python到JavaScript和C#,甚至PHP,哪一款不是虚拟机语言??
虚拟机语言是对底层固化语言的丰盛繁荣和简化,这为昂撒人的软件工程体系发展带来爆炸式的增长,
以至于现在大语言模型也是用Python作为主导交互工具.
这都是一步一脚印,一加一,二加二,这么一点点积累起来的,所以昂撒人又发生了新的质变---大语言模型.
这就是为啥我们前几年对人工智能技术大规模投入,但翻不起浪花,
而科技革命---ChatGPT还是诞生并发生在昂撒人那里的原因!
我们这边饮鸩止渴,竭泽而渔的各路编程买办,不但不知耻辱,还认为自己会点虚拟机语言编程就掌握了核心技术.
这就像是比尔盖茨放任盗版Windows给中国人用,导致我们在系统这块,到现在还是原地踏步,搞各种Linux发行版就说成是自己的一样可笑.
并且几亿的电脑用户,和现在十几亿的手机用户,都认准了Windows的界面 = 操作系统.安卓苹果的界面 = 手机的使用方式.
大家反思下,这是不是就是某种程度的信息茧房? 
一个封死的铁屋子甚至大到找不到边缘,一般人,外行新手小白,又怎么可能窥见其全貌??

------
现在怎么办?
这确实就是摆在当前需要面对的现实问题.

我现在能想到的,也就是汉化和复刻了,
要不你还能干哈?这么几十年也都是复制粘贴这么发展过来的,你还能憋出什么别的大招?
要基础原理没原理,要匠人积累没积累.要啥没啥,啥都没有,啥都不是!

汉化就是要连别人大项目的源码都要汉化,否则一般人,外行新手小白去哪里找教程,找学习的样本?
你以为个个都能做到编程买办那样,通过看拉丁字母的英文源码掌握编程?这些人其实已经没有任何立场,没有任何底线了,
所以它们能做到这种程度.
只有汉化了源码,大家都看得懂,易读易理解.才能引入更多的一般人,外行新手小白,壮大队伍,增添新鲜血液,为这个行业带来活力,
最终量变引起质变,发生新技术,才能做到所谓的产业升级!

复刻就是发挥复制苏联和昂撒人工业体系的老传统,
把别人现成的东西在前面汉化的基础上,拆分开来,自己重新组装自己想要的部件.
比如我最近发现的,学习llvm的构造逻辑,造个桥就是了.
我发现不管是哪种语言,只要有句法树,不管是静态编译型,还是动态解释型,全都可以通过连接到llvm的IR,实现运行时在机器码上,这一行为.
这就带来了原生高性能,这是复刻产业体系所必须的.因为在机器码上实时运行才能实现自举!
因为llvm是用C++开发的,所以这一步的窍门就是,在虚拟机语言的字节码到llvm的IR中间造一座桥.
当然,首先我们应该汉化llvm和C++,但这一步就可能会难住很多人,
所幸现在大语言模型横空出世,我们可以用大模型实现批量汉化.

我预测,往后出现的编程语言,一经出世,就会通过大语言模型进行训练,用户只需要通过日常语言交流即可使用这门新的编程语言,
老旧的编程语言,就是现有的那些,那更是如此.
大语言模型就像是语言专家,一种专家系统,比那些熟练甚至精通某种编程语言的程序员还要更精深的程度.
这是一种发展趋势,是西方软件工程体系发展到量变到质变所必然诞生的新事物.
对于普通人,一般人,外行新手小白使用者来说,大语言模型就像是在源码与编译器的词法(字词,词汇)分析之间又增加一个步骤,
使编程难度大大降低,极大简化编程工具的使用,
这或许就是我追求的另一种意义上的---全民编程---的实现吧.
殊途同归,殊途同归.

再往后,可能就是人类语言的语素到十六进制之间通过大语言模型的直接翻译了.
我推理出,这可能是人类实现机械飞升的关键,做到这一步,人类才能方便地往机械里传输记忆、意识、知识.