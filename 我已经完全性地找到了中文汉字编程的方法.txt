终于,
我已经完全性地找到了中文汉字编程的方法,
从16年开始找, 找了那么多年, 原来事实的源头是如此的简单又实用,
用一句话就可以简单描述过程, [用栈思维创造的栈语言]. 栈思想甚至可以上升到哲学范畴.
因为栈说白了就是个容器, 生活中可以用栈来抽象的容器实在是太多了,小到身边见到的一切,平常所用的大多数日用工具,大到宇宙,

为啥用了这么多年, 因为我被困在了C语族的迷局里, 在网上能找到的所有文章帖子教程, 甚至交流社区和群里,
全都是C语族的内容, C语族就是自Fortran以来, 包括C C++ Java Python ...等等, 反正就是这一类全部代码,
形成的屏障壁垒大到难以想象, 而C语族是最不适合搞中文汉字编程的, 我以前没发现这一点,
直到我跳出这个局以后, 了解并尝试并实践了以lisp与forth为代表的其它语族的用来构造程序逻辑的方法以后,
我发现了新的天地,
同时也对比了与C语族的差别后, 彻底看清了C语族迷局的本质,
C语族以中缀表达式为主,掺杂少量前缀和后缀表达式,并且选取数学公式那样类似的形式演算方法,
它的特点就是既远离人类,也远离计算机,也就是两边都不讨好,虽然偏向数学公式,但又不完全是,只是模仿了公式的形,
其实就是个四不像,这就是它为啥那么难用难学的原因, 
又必须要有一个抽象的计算过程-编译器,和庞大的库去完善它自身的缺陷和不足, 所以C语族可以概括为面向函数库编程,
它的冗余也是越来越大, 占的空间越来越多, 但是实现的功能却不多, 就那几样, 所以硬件的缓存和存储空间也发展得越来越大,
但大部分都是在重复,

而以前缀表达式为代表的lisp,就完全没这个问题,因为它没有变量这个概念,或者说它的变量是不变的,
所以也就不会存在冗余, 因此也就不会占用巨大的存储空间来表达实现功能的逻辑,
lisp是可以完全实现中文汉字编程的, 因为它以S表达式, 即-符号表达式为基础,
符号顾名思义就是用各种符号,这就不局限于数学符号还是自然语言的文字符号了,
唯一的不足就是有括号,会隔开汉字和词语句段, 当然,有些人会认为这是结构化,
所以这是仁者见仁智者见智的事.
所谓中缀前缀后缀, 这个描述对应的是, 操作码和操作数在形式逻辑上的位置,
还有个说法就是数学表达式 波兰表达式 逆波兰表达式. 其实这三者是相等的,
中缀对应数学表达式,就是操作码在中间,操作数在两边.
前缀对应波兰表达式,就是操作码在前面,操作数全在后面.
后缀对应逆波兰表达式,就是操作码在后面,操作数全在前面.
lisp选用前缀,带来了简洁优雅的描述程序逻辑的方法,并且视程序和数据为一体,这是前缀的波兰表达式带来的好处,

forth就是后缀的逆波兰表达式这类,它更适合中文汉字编程,因为它连括号都没有了,它完全不需要括号来概括编程语言的语法,
因为它的操作码在操作数的后面,这对人类来说几乎是最自然的表达方式,你可以把操作数看做是栈顶,而操作码看做是栈底,
[要做什么事,先准备材料,之后执行]. 就是这么简单, 每个细分的步骤都是这句话自身的递归, 它可以往下递归, 也可以往上递归,
有些人觉得这很反人类, 其实它只是不适合当语言或口语话语来用, 但非常适合做文字书面表达, 其实是工程处理的利器,
并且,它还很适合指令式计算机的计算, 即便是C语族那么多语言的编译器到生成代码这一步骤的时候, 也大多是用后序遍历来实现的,
然后又把顺序改为前缀和中缀去生成机器码, 这种冗余这种多此一举, 在C语族里到处都是,
计算机它天然就适合后缀表达式, 处理器的执行过程,就是先要准备操作数,然后丢给操作码执行, 先执行操作码就需要等待操作数到齐了才行,
forth这类栈语言它不适合用C语族的思维来看待, 它适合用栈思维去认知,
栈语言它不需要像C语族那样每个计算阶段都要用不同的工具链来实现,也就是不同的编程语言来做一件小事,
它可以直接从机器语言开始定义到高级语言,甚至人类语言, 这是由栈思维的逻辑本质决定的,
首先我们拥有的材料是电路构成的逻辑门,逻辑门构成的机器指令,机器指令由01001100这种形式表达, 当然,平常我们使用的时候都是把4位二进制转为1位十六进制来用的,
由16进制组成的机器指令我们可以构造更高级的语素, 因为汉字也可以用16进制来表示, 所以这时候我们可以用16进制存储的汉字表示某一单独的语素,
比如标点符号 偏旁部首 点横竖撇捺,或直接的单个汉字, 当然,这不是随意可以与机器指令绑定的, 我们得找出语意与指令的语义等同的汉字来绑定,
比如真1 假0, 与 或 非, 加减乘除,等等,
选用不同的汉字绑定操作码和操作数,根据汉字的意义来实现, 我们就可以得到一套基本的表达逻辑,
在此基础上,可以组合成复杂的逻辑, 单个字与词句所表达的意义肯定不同, 但这却可以用栈语言容纳, 因此,并不是说3千5千个常用汉字用完了就没法表达,
我们还可以定义词语 句子来表达复杂的逻辑概念, 而这一样可以被栈语言接受容纳和执行,
为什么呢? 你看我们看一本书, 我们要看完才知道整个内容的意义,对吧? 这其实就是栈思维的一种抽象体现,
你看书里章节的内容相当于是一份一份地存储在栈顶,当你看到书后面结尾的时候,内容增加就不断地推到栈底了,
当你看完的时候,全部内容就从栈底返回,你经过归纳总结就知道了整本书的内容在表达什么意义, 怎么样? 栈思维可以概括这个过程吧,
既然可以用栈思维来陈述,那么就可以把它通过栈语言转化为程序逻辑, 所以你可以用栈语言定义机器语言到高级语言甚至人类语言所需描述的一切,
而其原理确是如此的简单,将人类的表达与计算机的表达完美合一, 真正的大道至简,